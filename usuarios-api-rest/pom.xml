<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.curso.usuarios</groupId>
  <artifactId>usuarios-api-rest</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  
  
	<!-- Configuraciones para los plugins de maven que estén dados de alta en el proyecto -->
	<properties>
		  <java.version>11</java.version>
		  <maven.compiler.source>11</maven.compiler.source>
		  <maven.compiler.target>11</maven.compiler.target>
	</properties>
  
  	<!-- Librerias que necesita mi proyecto --> 
	<dependencies>
		<!-- En esa app web queremos trabajar con Persistencia (BBDD)-->
		<dependency>
		    <groupId>org.springframework.boot</groupId>
		    <artifactId>spring-boot-starter-web</artifactId>
		    <version>2.7.12</version>
		</dependency>	
		<!-- Lombok, nos da un montón de anotaciones muy útiles-->
		<dependency>
		    <groupId>org.projectlombok</groupId>
		    <artifactId>lombok</artifactId>
		    <version>1.18.26</version>
		    <!-- 
		    Esta dependencia no se necesita en tiempo de ejecución. 
		    Lo que hace es en tiempo de compilación generar código por mi
		    No hace falta distribuir el jar de lombok a mis usuarios.
		    Realmente scope: provided hace un truco. Decimos: En el entorno de ejecución... te la darán 
		    -->
		    <scope>provided</scope>
		</dependency>	
		<dependency>	
		  <groupId>com.curso.usuarios</groupId>
		  <artifactId>usuarios-servicio</artifactId>
		  <version>0.0.1-SNAPSHOT</version>
		</dependency>	
	</dependencies>
</project>